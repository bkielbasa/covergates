name: CD
on: push
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  SERVER_API_URL: https://covergates.com/api/v1

jobs:
  release:
    name: "release ${{matrix.os}}"
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - run: go get github.com/karalabe/xgo

      - name: Build Ubuntu Binary
        run: |
          xgo --branch release-test --targets=windows/amd64 -out covergates-server github.com/covergates/covergates/cmd/server
          zip covergates-server-windows-4.0-amd64.zip covergates-server-windows-4.0-amd64.exe

      - name: Upload Binary
        uses: actions/github-script@v2
        env:
          OS_TYPE: "${{matrix.os}}"
        with:
          github-token: ${{secrets.DEPLOY_KEY}}
          script: |
            const fs = require('fs');
            const getHeaders = (filePath, fileName) => {
              const extension = fileName.split('.').pop()
              const size = fs.statSync(filePath).size
              const options = {
                'json': 'text/json',
                'zip': 'application/zip',
                'txt': 'text/plain',
                'ts': 'application/typescript'
              }

              return {
                'content-type': options[extension],
                'content-length': size
              }
            }
            const tag = 'v0.0.1';
            const repo = `${process.env.GITHUB_REPOSITORY}`.split('/');
            const response = await github.repos.getReleaseByTag({
              owner: repo[0],
              repo: repo[1],
              tag: tag
            });
            const release = response.data.id;
            const url = `https://uploads.github.com/repos/${repo[0]}/${repo[1]}/releases/${release}/assets{?name,label}`;
            const files = ['covergates-server-windows-4.0-amd64'];
            for (const file of files) {
              const name = `${file}.zip`;
              await github.repos.uploadReleaseAsset({
                url: url,
                headers: getHeaders(name, name),
                data: fs.createReadStream(name),
                name: name
              });
            }
